## This is the setup for UFO outflows into two-phase fractal ISM

2012-07-17 18:18 JST

Started modifying bits and pieces to create this problem. Basically it is similar to the jet problem, except for the input parameters, which are to be:


  UPOW      UFO power (erg s^-1)
  UANG      Angle etween disc and UFO in (deg)
  USPD      Speed of UFO (in units of speed of light)
  UMDT      Mdot out of UFO (Msun yr^-1) 
  URAD      Ufo radius (kpc)
  UTHK      Ufo outflow annulus thickness (kpc) 
  HEMF      Same as Jet3D
  HRHO         --::-- 
  HTE          --::-- 
  WRHO         --::-- 
  WRAD         --::-- 
  HRAD         --::-- 
  CLXC         --::-- 
  CLYC         --::-- 
  CLZC         --::-- 
  CLSZ         --::-- 
  CLRS         --::-- 
  CLVX         --::-- 
  CLVY         --::-- 
  CLVZ         --::-- 
  LEV1         --::-- 

2012-08-02 11:15 JST

Wind inlet region (one of the varieties) is complete. The setup exploits the cylindrical symmetry of the injection region and uses a simple coordinate rotation by an angle theta (= aux[UANG]) from (r, x1) to (r', x1'), where r = sqrt(x2^2 + x3^2). The unprimed coordinates system are those aligned with the grid, the primed are those for which x1' is aligned with the wind. The rotations are done with RotateGrid2Wind() and RotateWind2Grid(). 

InWindRegion() is used to test if a cell is in the wind source region. This works in the boundary region, on the boundary plane, and in the grid region. InWindBase() is unused.

As in the case of the jet, we fill a portion of the grid region with wind material so that the initial injection happens smoothly. The condition for whether a cell is in the initial wind region is an implicit inequality that describes the protrusion and cap in the wind direction. The inequality is just tested on a cell by cell basis.

Furthermore the source region may extrude into the grid. The entire initial wind region filled by wind material may be a source term. This is accomplished with the condition if (side == 0) in USERDEF_BOUNDARY.

The condition for whether the data grid contains the wind region could be included in case there is a performance problem in looping over the whole domain (with DOM_LOOP).  This has now been included but not tested. New loop macros over surfaces of a box have been included in pluto.h. Given a condition C(p, V) that a point P is inside a volume V, we apply C on all points of the surfaces enclosing a box. If at least one point satisfies C, then at least one point in the current box contains cells part of volume V, and a full domain loop over the box is conducted. This can in principle also be used in future in TagCells.cpp. Loop Macros: KTDOM_LOOP(in,k,j,i), JTDOM_LOOP(in,k,j,i), ITDOM_LOOP(in,k,j,i), BOX_SURF_LOOP(k1,k2,j1,j2,i1,i2,k,j,i,command), DOM_SURF_LOOP(k,j,i,command). These macros were inspired by TRANSVERSE_LOOP

There are four possible wind inlets. The wind inlet type is chosen with preprocessor variable in definitions_usr.h WIND which can take values ANN, FAN, ANN_PRO, FAN_PRO. FAN and FAN_PRO haven't been programmed yet. ANN = annulus; FAN = fan; _PRO = protrusion.

ANN is the annulus shaped inlet at distance R (aux[URAD]) and width W (aux[UTHK]) with the outflow all pointing into the direction theta. ANN_PRO is the same, except with the capped protrusion into the grid specified as initial conditions always being a fixed source. FAN is a fan shaped outlet of radius R with outflow velocity vector angles ranging from 0 to theta. 

The condition for whether the data grid contains the wind region is now included through a loop over the surfaces of the box, which checks whether any of the points on the surfaces are in the wind region. If so, a full domain loop is begun.

All unnecessary function arguemnts have been removed (e.g. the normalization object)

All bits in init.c that deal with components now use the EXPAND macro. All bits that deal with dimensions use D_EXPAND.

2012-08-15 16:45 JST 

jet_domain.c now has the option to use the pressure compared to the initial background pressure as a method to determine the rightmost integration limit. Whether this mode is used or the gradient mode is used is determined by the PP switch JD_MODE, which can take on values JD_GRAD or JD_PRES. See definitions_usr.h.

The MPI_ALLREDUCE bit to get the globally largest n was commented out experimentally. Initial tests indicate that the rightmost indices can be computed from the value of the pressure compared to that of the initial profile.


2012-10-02 09:55 JST

Now use HOT_DISTR and CLOUD_DISTR to set the hot phase and warm phase spatial distribution. HOT_DISTR HOT_EXT_DATA will load data from external file. 

The external data has been split to separate the gravity component and the hot phase spatial distribution. The file GRAVFNAME (typically gravtable.dat) has two columns and stores radius vs potential or gravitational acceleratinon. An optional header file, GRAVHNAME (typically gravtable.hdr), with key-value pairs can exist. HOTFNAME (typically hottable.dat) contains three columns with radius, density, and pressure. At some point these should be in cgs, but currently the code expects them to be in code units already.


The setup can now initialize a cloud distribution with an isothermal turbulent sphere, or a nearly Kelperian turbulent disk. Note that the rotational velocities are kept at zero because they are small enough not to be recognizable in the simulations during the phase of feedback. For runs on 10kpc or more, a rotational component needs to be introduced.

The setups are controlled by the PP variables, CLOUD_DISTR = {TURB_ISOTH_HYDROSTATIC|TURB_KEPLERIAN_DISC} in definitions_usr.h. The gravity must be initialized with the potential, and not the acceleration vector.

The important ini parameters controlling the profile are the central density, WRHO, the rotation parameter, WROT (only for the quasi-Keplerian disk), and the scale height, WRAD. Note that the scale height also serves as a cutoff for the (hemi-)spherical cloud extraction.

The value of WROT used in Sutherland & Bicknell 2007 is 0.93.

The turbulent velocity dispersion, WTRB, does not explicitly go into the setup yet. But defining it lets us define a mean temperature of the warm phase, which should be consistent with the mean temperature of the warm phase after apodization and setting the clouds in pressure equilibrium with the surrounding hot phase gas. A typical value for the turbulent velocity dispersion is 30 km s^-1 for n_cl,av,0 = 1000 cm^-3 denisty (at the core). This gives a mean disk temperature just less than 10^4 K and a total velocity dispersion of the gas, sigma_g = sqrt(sigma_turb^2 + kT/mu*amu) = 40 km/s. This sigma_g corresponds to a scale height (using the equation for the core radius of a King sphere - this is used in the code. Probably the disk scale height should be calculated differently, but it will probably only differ by a factor ~1) of 133 pc. For a mean disk temperature of 1.e3, the turbulent velocity dispersion needs to be 36.3. For a core density of 300 cm^-3, the scale height increases to 240 pc, so it's better to choose a total velocity dispersion, sigma_g = 20. The corresponding turbulent velocity dispersions are then the same minus 20 km s^-1, that is, 10 km/s, and 16.3 km s^-1.



2012-10-09 17:21 JST

This is the new main branch of development which aims to merge Jet3D and UFO into AGN_Feedback. Planned enhancements are:

- Use of either jet or wind inlet. Unified runtime runtime parameters. The parameters can mean different things, but share the same index constants.
- Some reorganization of where the code is.
- Use of either RHD or HD (and also MHD or RMHD)
- Use of either Cartesian, Cylindrical, or Spherical coordinate system in 2 or 3D! Mainly with macros.

2012-10-09 17:26 JST

Created pluto_usr.h, in which definitions_usr.h is included. The file definitions_usr.h should now only contain parameters to be set. The file definitions_ref.h doesn't exist anymore. Some changes in pluto.h were moved to pluto_usr.h, but not all. E.g. the changes in already existing structures were kept in pluto.h, and are marked with AYW. I do as many things as possible in pluto_usr.h

UfoNorm and JetNorm have been renamed to VarNorm. There are also ini_code and ini_cgs arrays, which converts ini parameters to cgs or code through multiplication.


2012-10-12 19:00 JST

Created a script called combiner (also available for PBS) that combines multiple vtk files into one. E.g. pr.*.vtk rho.*.vtk tr[12].*.vtk and v[123].*.vtk into data.*.vtk. It's just sometimes easier dealing with the anlaysis with single files. The script is pretty fast, relying only on cat and sed! :)  But only works for small files :( .

Now I wrote a small C++ script (comb.c) that just reads and concatinates vtk files. Use it with a batch script that first copies one file to the target, and then use comb to append the other files properly. This was a bit tricky because of the jmixed binary non-binary nature of vtk files, never mind that the binary bits need to be in big-endian. On myung, use the combiner batch script (~/research/bin), on mosura too, and on vayu it's a pbs script. This works nicely now.


2012-11-14 17:23 JST

Migrating to PLUTO 4.0. Lots of changes.

* Adjusted syntax.

* Removed global variables init_ext and init_restart. No need.

* Removed static keyword from functions. There shouldn't be name-space problems. 

* External initialization:

  - clouds can only be initialized externally, and this is now done with calls to appropriate functions in Init.c
  - new source file input_data.c is modified to reduce memory constraints. I use my geometry independent macros to convert velocity vectors from to all coordinates (untested). I also wrote my version of the conversion for positions using the macros (untested, unused).
  - create_PLUTO_gridfile.py is now in the bin/ directory to create grid.out file for a start from external data

* Some code added in ChangeDumpVar and SetUserVar in userdef_output to

  - output v instead of u = lorentz * v, in case USE_FOUR_VELOCITY is YES
  - temperature and speed as extra variables
  - image slices of several variables

* Changed all input parameter PP variables to have suffixes PAR_. All input parameter quantities are copied to a local variable and normalized using an arrays containing normalization constants according to parameter (See ini_cgs and ini_code arrays and SetIniNormalization function. It all looks more uniform this way). Also, everything is generalized as an outflow, so outflow PP variables start with O. PAR_CLC{1|2|3} and PAR_CLV{1|2|3} are assumed to be in PLUTO coordinates.

* Combined "nozzles", in the sense that the nozzle geometry dependent bit is in OutflowVelocity() function, which is called by both JetPrimitives() and UfoPrimitives(). These functions are selected with NOZZLE_SELECT macro inside OutflowPrimitives().

* Added Macros that distinguishes by dimension and geometry, whether a quantity has unit angle or unit length. DIMDIM{1|2|3}.

* Moved functions that were originally not in init.c into a different file, init_tools.c and init_tools.h.

* Factored out Outflow velocity calculations from Primitives calculations in init.c for jet and wind. Those are the same. But the other primitives (density and pressure, etc) are calculated differently.

2013-03-14 18:11 JST

* pluto_usr.h: Rewrote BOX_SURF_LOOP to be a surface variant of BOX_LOOP in pluto.h

* pluto_usr.h: Redefined DOM_SURF_LOOP to be a surface variant of DOM_LOOP in pluto.h

2013-04-12 11:25 JST

* TagCells.cpp: Included preprocessor variables with which we can include a second gradient-based refinement criterion which is added in quadrature. Included a third refinement mode for trc2, which is at the moment also gradient based. Refinement is not triggered if cell variable value is ~ 0 (less than small = 10^-15).  


2014-06-04 16:06 JST

* Included most recent cooling functions and wrote python scripts (<cool_function_name>_log2lin.py) to convert a given cooling table to a format that can be read by PLUTO. For solx1_log2lin.py, the script can also produce a t/mu vs mu table and t vs mu table. Updated phystools in the process. Added files with functions that can read mu table. The MeanMolecularWeight function can now interpolate the mu table. All mu and cooling related stuff is in (except for radiat.c, which is a PLUTO file that needs to be overwritten).  MU_CALC can have one of three values MU_CONST MU_TABLE MU_ANALYTIC. A MU_NORM value must now be set in definitions_usr.h to ensure a default value for mu. Currently, for a fully ionized plasma, this is 0.6156, according to Asplund 2005 solar abundances.

* Ensured that the CLOUD_VELOCITY flag set to true will read in the velocity data in the clouds.dbl file. New modification methods to the clouds velocity field are added. CLOUD_VEL_DISTR can have values CV_UNIFORM CV_RADIAL CV_KEPLERIAN_FRAC CV_VIRIAL_FRAC. A value for CV_VALUE must also be set, which has different meanings according to CLOUD_VEL_DISTR.

... 

* Small changes to file and function names. E.g. tempEOS.c -> nrEOS.c, for non-relativistic EOS. These helper files should only be used for non-relativistic gas. Possibly in the future other EOS incorporating variable gamma may be available.

* Made CLOUD_UNDERPRESSURE a definitions_usr.h variable

